{"version":3,"file":"legacy.js","sources":["../src/Statement.js","../src/Database.js","../src/main.js"],"sourcesContent":["/**\n * SQLite client library for Node.js applications\n *\n * Copyright © 2016 Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nclass Statement {\n\n  constructor(stmt, Promise) {\n    this.stmt = stmt;\n    this.Promise = Promise;\n  }\n\n  bind(...params) {\n    return new this.Promise((resolve, reject) => {\n      this.stmt.bind(...params, err => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(this);\n        }\n      });\n    });\n  }\n\n  reset() {\n    return new this.Promise(resolve => {\n      this.stmt.reset(() => {\n        resolve(this);\n      });\n    });\n  }\n\n  finalize() {\n    return new this.Promise((resolve, reject) => {\n      this.stmt.finalize(err => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(this);\n        }\n      });\n    });\n  }\n\n  run(...params) {\n    return new this.Promise((resolve, reject) => {\n      this.stmt.run(...params, err => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(this);\n        }\n      });\n    });\n  }\n\n  get(...params) {\n    return new this.Promise((resolve, reject) => {\n      this.stmt.get(...params, err => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(this);\n        }\n      });\n    });\n  }\n\n  all(...params) {\n    return new this.Promise((resolve, reject) => {\n      this.stmt.all(...params, err => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(this);\n        }\n      });\n    });\n  }\n\n  each(...params) {\n    return new this.Promise((resolve, reject) => {\n      const callback = params.pop();\n      this.stmt.each(...params, callback, (err, rowsCount = 0) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(rowsCount);\n        }\n      });\n    });\n  }\n\n}\n\nexport default Statement;\n","/**\n * SQLite client library for Node.js applications\n *\n * Copyright © 2016 Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport Statement from './Statement';\n\nclass Database {\n\n  /**\n   * Initializes a new instance of the database client.\n   * @param driver An instance of SQLite3 driver library.\n   * @param promiseLibrary ES6 Promise library to use.\n     */\n  constructor(driver, { Promise }) {\n    this.driver = driver;\n    this.Promise = Promise;\n  }\n\n  /**\n   * Close the database.\n   */\n  close() {\n    return new this.Promise((resolve, reject) => {\n      this.driver.close(err => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  run(sql, ...params) {\n    return new this.Promise((resolve, reject) => {\n      this.driver.run(sql, params || [], err => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(this);\n        }\n      });\n    });\n  }\n\n  get(sql, ...params) {\n    return new this.Promise((resolve, reject) => {\n      this.driver.get(sql, params || [], (err, row) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(row);\n        }\n      });\n    });\n  }\n\n  all(sql, ...params) {\n    return new this.Promise((resolve, reject) => {\n      this.driver.all(sql, params || [], (err, rows) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(rows);\n        }\n      });\n    });\n  }\n\n  /**\n   * Runs all the SQL queries in the supplied string. No result rows are retrieved.\n   */\n  exec(sql) {\n    return new this.Promise((resolve, reject) => {\n      this.driver.exec(sql, err => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(this);\n        }\n      });\n    });\n  }\n\n  each(sql, ...params) {\n    const callback = params.pop();\n    return new this.Promise((resolve) => {\n      this.driver.each(sql, params, callback, resolve);\n    });\n  }\n\n  prepare(sql, ...params) {\n    return new this.Promise((resolve, reject) => {\n      const stmt = this.driver.prepare(sql, ...params, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(new Statement(stmt, this.Promise));\n        }\n      });\n    });\n  }\n\n  /**\n   * Migrates database schema to the latest version\n   */\n  async migrate({ force, table = 'migrations', migrationsPath = './migrations' } = {}) {\n    const location = path.resolve(migrationsPath);\n\n    // Get the list of migration files, for example:\n    //   { id: 1, name: 'initial', filename: '001-initial.sql' }\n    //   { id: 2, name: 'feature', fielname: '002-feature.sql' }\n    const migrations = await new this.Promise((resolve, reject) => {\n      fs.readdir(location, (err, files) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(files\n            .map(x => x.match(/^(\\d+).(.*?)\\.sql$/))\n            .filter(x => x !== null)\n            .map(x => ({ id: Number(x[1]), name: x[2], filename: x[0] }))\n            .sort((a, b) => a.id > b.id));\n        }\n      });\n    });\n\n    if (!migrations.length) {\n      throw new Error(`No migration files found in '${location}'.`);\n    }\n\n    // Ge the list of migrations, for example:\n    //   { id: 1, name: 'initial', filename: '001-initial.sql', up: ..., down: ... }\n    //   { id: 2, name: 'feature', fielname: '002-feature.sql', up: ..., down: ... }\n    await Promise.all(migrations.map(migration => new this.Promise((resolve, reject) => {\n      const filename = path.join(location, migration.filename);\n      fs.readFile(filename, 'utf-8', (err, data) => {\n        if (err) {\n          reject(err);\n        } else {\n          const [up, down] = data.split(/^\\-\\-\\s+?down/mi);\n          if (!down) {\n            const message = `The ${migration.filename} file does not contain '-- Down' separator.`;\n            reject(new Error(message));\n          } else {\n            /* eslint-disable no-param-reassign */\n            migration.up = up.replace(/^\\-\\-.*?$/gm, '').trim();     // Remove comments\n            migration.down = down.replace(/^\\-\\-.*?$/gm, '').trim(); // and trim whitespaces\n            /* eslint-enable no-param-reassign */\n            resolve();\n          }\n        }\n      });\n    })));\n\n    // Create a database table for migrations meta data if it doesn't exist\n    await this.run(`CREATE TABLE IF NOT EXISTS \"${table}\" (\n  id   INTEGER PRIMARY KEY,\n  name TEXT    NOT NULL,\n  up   TEXT    NOT NULL,\n  down TEXT    NOT NULL\n)`);\n\n    // Get the list of already applied migrations\n    let dbMigrations = await this.all(\n      `SELECT id, name, up, down FROM \"${table}\" ORDER BY id DESC`\n    );\n\n    // Undo migrations that exist only in the database but not in files,\n    // also undo the last migration if the `force` option was set to `last`.\n    const lastMigration = migrations[migrations.length - 1];\n    for (const migration of dbMigrations.slice().sort((a, b) => a.id < b.id)) {\n      if (!migrations.some(x => x.id === migration.id) ||\n        (force === 'last' && migration.id === lastMigration.id)) {\n        await this.run('BEGIN');\n        try {\n          await this.exec(migration.down);\n          await this.run(`DELETE FROM \"${table}\" WHERE id = ?`, migration.id);\n          await this.run('COMMIT');\n          dbMigrations = dbMigrations.filter(x => x.id !== migration.id);\n        } catch (err) {\n          await this.run('ROLLBACK');\n          throw err;\n        }\n      } else {\n        break;\n      }\n    }\n\n    // Apply pending migrations\n    const lastMigrationId = dbMigrations.length ? dbMigrations[dbMigrations.length - 1].id : 0;\n    for (const migration of migrations) {\n      if (migration.id > lastMigrationId) {\n        await this.run('BEGIN');\n        try {\n          await this.exec(migration.up);\n          await this.run(\n            `INSERT INTO \"${table}\" (id, name, up, down) VALUES (?, ?, ?, ?)`,\n            migration.id, migration.name, migration.up, migration.down\n          );\n          await this.run('COMMIT');\n        } catch (err) {\n          await this.run('ROLLBACK');\n          throw err;\n        }\n      }\n    }\n\n    return this;\n  }\n}\n\nexport default Database;\n","/**\n * SQLite client library for Node.js applications\n *\n * Copyright © 2016 Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport sqlite3 from 'sqlite3';\nimport Database from './Database';\n\nconst db = new Database(null, { Promise: global.Promise });\n\n/**\n * Opens SQLite database.\n *\n * @returns Promise<Database> A promise that resolves to an instance of SQLite database client.\n */\ndb.open = (filename, { mode = null, verbose = false, Promise = global.Promise } = {}) => {\n  let driver;\n\n  if (verbose) {\n    sqlite3.verbose();\n  }\n\n  return new Promise((resolve, reject) => {\n    if (mode !== null) {\n      driver = new sqlite3.Database(filename, mode, err => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    } else {\n      driver = new sqlite3.Database(filename, err => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    }\n  }).then(() => {\n    db.driver = driver;\n    db.Promise = Promise;\n    return new Database(driver, { Promise });\n  });\n};\n\nexport default db;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;IASM;qBAEQ,IAAZ,EAAkB,OAAlB,EAA2B;;;SACpB,IAAL,GAAY,IAAZ;SACK,OAAL,GAAe,OAAf;;;;;2BAGc;;;wCAAR,MAAQ;cAAA;;;aACP,IAAI,KAAK,OAAT,CAAiB,UAAC,OAAD,EAAU,MAAV,EAAqB;;;uBACtC,IAAL,EAAU,IAAV,cAAkB,MAAlB,SAA0B,eAAO;cAC3B,GAAJ,EAAS;mBACA,GAAP;WADF,MAEO;;;SAHT;OADK,CAAP;;;;4BAWM;;;aACC,IAAI,KAAK,OAAT,CAAiB,mBAAW;eAC5B,IAAL,CAAU,KAAV,CAAgB,YAAM;;SAAtB;OADK,CAAP;;;;+BAOS;;;aACF,IAAI,KAAK,OAAT,CAAiB,UAAC,OAAD,EAAU,MAAV,EAAqB;eACtC,IAAL,CAAU,QAAV,CAAmB,eAAO;cACpB,GAAJ,EAAS;mBACA,GAAP;WADF,MAEO;;;SAHT;OADK,CAAP;;;;0BAWa;;;yCAAR,MAAQ;cAAA;;;aACN,IAAI,KAAK,OAAT,CAAiB,UAAC,OAAD,EAAU,MAAV,EAAqB;;;yBACtC,IAAL,EAAU,GAAV,eAAiB,MAAjB,SAAyB,eAAO;cAC1B,GAAJ,EAAS;mBACA,GAAP;WADF,MAEO;;;SAHT;OADK,CAAP;;;;0BAWa;;;yCAAR,MAAQ;cAAA;;;aACN,IAAI,KAAK,OAAT,CAAiB,UAAC,OAAD,EAAU,MAAV,EAAqB;;;yBACtC,IAAL,EAAU,GAAV,eAAiB,MAAjB,SAAyB,eAAO;cAC1B,GAAJ,EAAS;mBACA,GAAP;WADF,MAEO;;;SAHT;OADK,CAAP;;;;0BAWa;;;yCAAR,MAAQ;cAAA;;;aACN,IAAI,KAAK,OAAT,CAAiB,UAAC,OAAD,EAAU,MAAV,EAAqB;;;yBACtC,IAAL,EAAU,GAAV,eAAiB,MAAjB,SAAyB,eAAO;cAC1B,GAAJ,EAAS;mBACA,GAAP;WADF,MAEO;;;SAHT;OADK,CAAP;;;;2BAWc;;;yCAAR,MAAQ;cAAA;;;aACP,IAAI,KAAK,OAAT,CAAiB,UAAC,OAAD,EAAU,MAAV,EAAqB;;;YACrC,WAAW,OAAO,GAAP,EAAjB;yBACK,IAAL,EAAU,IAAV,eAAkB,MAAlB,SAA0B,QAA1B,EAAoC,UAAC,GAAD,EAAwB;cAAlB,SAAkB,yDAAN,CAAM;;cACtD,GAAJ,EAAS;mBACA,GAAP;WADF,MAEO;oBACG,SAAR;;SAJJ;OAFK,CAAP;;;;;;ICxEE;;;;;;;;oBAOQ,MAAZ,QAAiC;QAAX,OAAW,QAAX,OAAW;;;SAC1B,MAAL,GAAc,MAAd;SACK,OAAL,GAAe,OAAf;;;;;;;;;;4BAMM;;;aACC,IAAI,KAAK,OAAT,CAAiB,UAAC,OAAD,EAAU,MAAV,EAAqB;cACtC,MAAL,CAAY,KAAZ,CAAkB,eAAO;cACnB,GAAJ,EAAS;mBACA,GAAP;WADF,MAEO;;;SAHT;OADK,CAAP;;;;wBAWE,KAAgB;;;wCAAR,MAAQ;cAAA;;;aACX,IAAI,KAAK,OAAT,CAAiB,UAAC,OAAD,EAAU,MAAV,EAAqB;eACtC,MAAL,CAAY,GAAZ,CAAgB,GAAhB,EAAqB,UAAU,EAA/B,EAAmC,eAAO;cACpC,GAAJ,EAAS;mBACA,GAAP;WADF,MAEO;;;SAHT;OADK,CAAP;;;;wBAWE,KAAgB;;;yCAAR,MAAQ;cAAA;;;aACX,IAAI,KAAK,OAAT,CAAiB,UAAC,OAAD,EAAU,MAAV,EAAqB;eACtC,MAAL,CAAY,GAAZ,CAAgB,GAAhB,EAAqB,UAAU,EAA/B,EAAmC,UAAC,GAAD,EAAM,GAAN,EAAc;cAC3C,GAAJ,EAAS;mBACA,GAAP;WADF,MAEO;oBACG,GAAR;;SAJJ;OADK,CAAP;;;;wBAWE,KAAgB;;;yCAAR,MAAQ;cAAA;;;aACX,IAAI,KAAK,OAAT,CAAiB,UAAC,OAAD,EAAU,MAAV,EAAqB;eACtC,MAAL,CAAY,GAAZ,CAAgB,GAAhB,EAAqB,UAAU,EAA/B,EAAmC,UAAC,GAAD,EAAM,IAAN,EAAe;cAC5C,GAAJ,EAAS;mBACA,GAAP;WADF,MAEO;oBACG,IAAR;;SAJJ;OADK,CAAP;;;;;;;;;yBAcG,KAAK;;;aACD,IAAI,KAAK,OAAT,CAAiB,UAAC,OAAD,EAAU,MAAV,EAAqB;eACtC,MAAL,CAAY,IAAZ,CAAiB,GAAjB,EAAsB,eAAO;cACvB,GAAJ,EAAS;mBACA,GAAP;WADF,MAEO;;;SAHT;OADK,CAAP;;;;yBAWG,KAAgB;;;yCAAR,MAAQ;cAAA;;;UACb,WAAW,OAAO,GAAP,EAAjB;aACO,IAAI,KAAK,OAAT,CAAiB,UAAC,OAAD,EAAa;eAC9B,MAAL,CAAY,IAAZ,CAAiB,GAAjB,EAAsB,MAAtB,EAA8B,QAA9B,EAAwC,OAAxC;OADK,CAAP;;;;4BAKM,KAAgB;;;yCAAR,MAAQ;cAAA;;;aACf,IAAI,KAAK,OAAT,CAAiB,UAAC,OAAD,EAAU,MAAV,EAAqB;;;YACrC,OAAO,kBAAK,MAAL,EAAY,OAAZ,iBAAoB,GAApB,SAA4B,MAA5B,GAAoC,UAAC,GAAD,EAAS;cACpD,GAAJ,EAAS;mBACA,GAAP;WADF,MAEO;oBACG,IAAI,SAAJ,CAAc,IAAd,EAAoB,OAAK,OAAzB,CAAR;;SAJS,GAAb;OADK,CAAP;;;;;;;;;;;;;0EAc+E;;YAAjE,cAAA;gCAAO;YAAA,oCAAQ;yCAAc;YAAA,sDAAiB;;YACtD,UAKA,YAmDF,cAME,4GAoBA,sGACK;;;;;;2BAnFM,KAAK,OAAL,CAAa,cAAb;;;;;;;uBAKQ,IAAI,KAAK,OAAT,CAAiB,UAAC,OAAD,EAAU,MAAV,EAAqB;qBAC1D,OAAH,CAAW,QAAX,EAAqB,UAAC,GAAD,EAAM,KAAN,EAAgB;wBAC/B,GAAJ,EAAS;6BACA,GAAP;qBADF,MAEO;8BACG,MACL,GADK,CACD;+BAAK,EAAE,KAAF,CAAQ,oBAAR,CAAL;uBADC,EAEL,MAFK,CAEE;+BAAK,MAAM,IAAX;uBAFF,EAGL,GAHK,CAGD;+BAAM,EAAE,IAAI,OAAO,EAAE,CAAF,CAAP,CAAN,EAAoB,MAAM,EAAE,CAAF,CAA1B,EAAgC,UAAU,EAAE,CAAF,CAA1C,EAAN;uBAHC,EAIL,IAJK,CAIA,UAAC,CAAD,EAAI,CAAJ;+BAAU,EAAE,EAAF,GAAO,EAAE,EAAnB;uBAJA,CAAR;;mBAJJ;iBADuB;;;;;oBAcpB,WAAW;;;;;sBACR,IAAI,KAAJ,oCAA0C,QAA1C;;;;uBAMF,QAAQ,GAAR,CAAY,WAAW,GAAX,CAAe;yBAAa,IAAI,OAAK,OAAT,CAAiB,UAAC,OAAD,EAAU,MAAV,EAAqB;wBAC5E,WAAW,KAAK,IAAL,CAAU,QAAV,EAAoB,UAAU,QAA9B,CAAjB;uBACG,QAAH,CAAY,QAAZ,EAAsB,OAAtB,EAA+B,UAAC,GAAD,EAAM,IAAN,EAAe;0BACxC,GAAJ,EAAS;+BACA,GAAP;uBADF,MAEO;0CACc,KAAK,KAAL,CAAW,iBAAX,CADd;;;;4BACE,EADF;4BACM,IADN;;4BAED,CAAC,IAAL,EAAW;8BACH,mBAAiB,UAAU,QAA3B,kDAAN;iCACO,IAAI,KAAJ,CAAU,OAAV,CAAP;yBAFF,MAGO;;oCAEK,EAAV,GAAe,GAAG,OAAH,CAAW,aAAX,EAA0B,EAA1B,EAA8B,IAA9B,EAAf;oCACU,IAAV,GAAiB,KAAK,OAAL,CAAa,aAAb,EAA4B,EAA5B,EAAgC,IAAhC,EAAjB;;;;;qBAXN;mBAF4C,CAAb;iBAAf,CAAZ;;;;uBAsBA,KAAK,GAAL,kCAAwC,KAAxC;;;;uBAQmB,KAAK,GAAL,sCACY,KADZ;;;;;;;;gCAMH,WAAW,WAAW,MAAX,GAAoB,CAA/B;;;;;;sBACX;;;;;;;gCACL,CAAC,WAAW,IAAX,CAAgB;mCAAK,EAAE,EAAF,KAAS,UAAU,EAAxB;2BAAhB,CAAD,IACD,UAAU,MAAV,IAAoB,UAAU,EAAV,KAAiB,cAAc;;;;;;iCAC9C,OAAK,GAAL,CAAS,OAAT;;;;;iCAEE,OAAK,IAAL,CAAU,UAAU,IAApB;;;;iCACA,OAAK,GAAL,mBAAyB,KAAzB,qBAAgD,UAAU,EAA1D;;;;iCACA,OAAK,GAAL,CAAS,QAAT;;;yCACS,aAAa,MAAb,CAAoB;mCAAK,EAAE,EAAF,KAAS,UAAU,EAAxB;2BAApB,CAAf;;;;;;;;iCAEM,OAAK,GAAL,CAAS,UAAT;;;;;;;;;;;;;;;;;;;4BAVY,aAAa,KAAb,GAAqB,IAArB,CAA0B,UAAC,CAAD,EAAI,CAAJ;yBAAU,EAAE,EAAF,GAAO,EAAE,EAAnB;iBAA1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAmBA,aAAa,MAAb,GAAsB,aAAa,aAAa,MAAb,GAAsB,CAAnC,EAAsC,EAA5D,GAAiE;;;;;6BACjE;;;;;;;;;;sBAClB,WAAU,EAAV,GAAe;;;;;;uBACX,KAAK,GAAL,CAAS,OAAT;;;;;uBAEE,KAAK,IAAL,CAAU,WAAU,EAApB;;;;uBACA,KAAK,GAAL,mBACY,KADZ,iDAEJ,WAAU,EAFN,EAEU,WAAU,IAFpB,EAE0B,WAAU,EAFpC,EAEwC,WAAU,IAFlD;;;;uBAIA,KAAK,GAAL,CAAS,QAAT;;;;;;;;;;uBAEA,KAAK,GAAL,CAAS,UAAT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDAML;;;;;;;;;;;;;;;;;;;;AC1MX,IAAM,KAAK,IAAI,QAAJ,CAAa,IAAb,EAAmB,EAAE,SAAS,OAAO,OAAlB,EAAnB,CAAX;;;;;;;AAOA,GAAG,IAAH,GAAU,UAAC,QAAD,EAA+E;mEAAP,EAAO;;uBAAlE,IAAkE;MAAlE,IAAkE,6BAA3D,IAA2D;0BAArD,OAAqD;MAArD,OAAqD,gCAA3C,KAA2C;0BAApC,OAAoC;MAApC,OAAoC,gCAA1B,OAAO,OAAmB;;MACnF,eAAJ;;MAEI,OAAJ,EAAa;YACH,OAAR;;;SAGK,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;QAClC,SAAS,IAAb,EAAmB;eACR,IAAI,QAAQ,QAAZ,CAAqB,QAArB,EAA+B,IAA/B,EAAqC,eAAO;YAC/C,GAAJ,EAAS;iBACA,GAAP;SADF,MAEO;;;OAHA,CAAT;KADF,MAQO;eACI,IAAI,QAAQ,QAAZ,CAAqB,QAArB,EAA+B,eAAO;YACzC,GAAJ,EAAS;iBACA,GAAP;SADF,MAEO;;;OAHA,CAAT;;GAVG,EAkBJ,IAlBI,CAkBC,YAAM;OACT,MAAH,GAAY,MAAZ;OACG,OAAH,GAAa,OAAb;WACO,IAAI,QAAJ,CAAa,MAAb,EAAqB,EAAE,gBAAF,EAArB,CAAP;GArBK,CAAP;CAPF;;"}