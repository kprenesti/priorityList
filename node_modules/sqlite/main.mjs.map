{"version":3,"file":"main.mjs","sources":["../src/Statement.js","../src/Database.js","../src/main.js"],"sourcesContent":["/**\n * SQLite client library for Node.js applications\n *\n * Copyright © 2016 Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nclass Statement {\n\n  constructor(stmt, Promise) {\n    this.stmt = stmt;\n    this.Promise = Promise;\n  }\n\n  bind(...params) {\n    return new this.Promise((resolve, reject) => {\n      this.stmt.bind(...params, err => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(this);\n        }\n      });\n    });\n  }\n\n  reset() {\n    return new this.Promise(resolve => {\n      this.stmt.reset(() => {\n        resolve(this);\n      });\n    });\n  }\n\n  finalize() {\n    return new this.Promise((resolve, reject) => {\n      this.stmt.finalize(err => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(this);\n        }\n      });\n    });\n  }\n\n  run(...params) {\n    return new this.Promise((resolve, reject) => {\n      this.stmt.run(...params, err => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(this);\n        }\n      });\n    });\n  }\n\n  get(...params) {\n    return new this.Promise((resolve, reject) => {\n      this.stmt.get(...params, err => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(this);\n        }\n      });\n    });\n  }\n\n  all(...params) {\n    return new this.Promise((resolve, reject) => {\n      this.stmt.all(...params, err => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(this);\n        }\n      });\n    });\n  }\n\n  each(...params) {\n    return new this.Promise((resolve, reject) => {\n      const callback = params.pop();\n      this.stmt.each(...params, callback, (err, rowsCount = 0) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(rowsCount);\n        }\n      });\n    });\n  }\n\n}\n\nexport default Statement;\n","/**\n * SQLite client library for Node.js applications\n *\n * Copyright © 2016 Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport Statement from './Statement';\n\nclass Database {\n\n  /**\n   * Initializes a new instance of the database client.\n   * @param driver An instance of SQLite3 driver library.\n   * @param promiseLibrary ES6 Promise library to use.\n     */\n  constructor(driver, { Promise }) {\n    this.driver = driver;\n    this.Promise = Promise;\n  }\n\n  /**\n   * Close the database.\n   */\n  close() {\n    return new this.Promise((resolve, reject) => {\n      this.driver.close(err => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  run(sql, ...params) {\n    return new this.Promise((resolve, reject) => {\n      this.driver.run(sql, params || [], err => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(this);\n        }\n      });\n    });\n  }\n\n  get(sql, ...params) {\n    return new this.Promise((resolve, reject) => {\n      this.driver.get(sql, params || [], (err, row) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(row);\n        }\n      });\n    });\n  }\n\n  all(sql, ...params) {\n    return new this.Promise((resolve, reject) => {\n      this.driver.all(sql, params || [], (err, rows) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(rows);\n        }\n      });\n    });\n  }\n\n  /**\n   * Runs all the SQL queries in the supplied string. No result rows are retrieved.\n   */\n  exec(sql) {\n    return new this.Promise((resolve, reject) => {\n      this.driver.exec(sql, err => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(this);\n        }\n      });\n    });\n  }\n\n  each(sql, ...params) {\n    const callback = params.pop();\n    return new this.Promise((resolve) => {\n      this.driver.each(sql, params, callback, resolve);\n    });\n  }\n\n  prepare(sql, ...params) {\n    return new this.Promise((resolve, reject) => {\n      const stmt = this.driver.prepare(sql, ...params, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(new Statement(stmt, this.Promise));\n        }\n      });\n    });\n  }\n\n  /**\n   * Migrates database schema to the latest version\n   */\n  async migrate({ force, table = 'migrations', migrationsPath = './migrations' } = {}) {\n    const location = path.resolve(migrationsPath);\n\n    // Get the list of migration files, for example:\n    //   { id: 1, name: 'initial', filename: '001-initial.sql' }\n    //   { id: 2, name: 'feature', fielname: '002-feature.sql' }\n    const migrations = await new this.Promise((resolve, reject) => {\n      fs.readdir(location, (err, files) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(files\n            .map(x => x.match(/^(\\d+).(.*?)\\.sql$/))\n            .filter(x => x !== null)\n            .map(x => ({ id: Number(x[1]), name: x[2], filename: x[0] }))\n            .sort((a, b) => a.id > b.id));\n        }\n      });\n    });\n\n    if (!migrations.length) {\n      throw new Error(`No migration files found in '${location}'.`);\n    }\n\n    // Ge the list of migrations, for example:\n    //   { id: 1, name: 'initial', filename: '001-initial.sql', up: ..., down: ... }\n    //   { id: 2, name: 'feature', fielname: '002-feature.sql', up: ..., down: ... }\n    await Promise.all(migrations.map(migration => new this.Promise((resolve, reject) => {\n      const filename = path.join(location, migration.filename);\n      fs.readFile(filename, 'utf-8', (err, data) => {\n        if (err) {\n          reject(err);\n        } else {\n          const [up, down] = data.split(/^\\-\\-\\s+?down/mi);\n          if (!down) {\n            const message = `The ${migration.filename} file does not contain '-- Down' separator.`;\n            reject(new Error(message));\n          } else {\n            /* eslint-disable no-param-reassign */\n            migration.up = up.replace(/^\\-\\-.*?$/gm, '').trim();     // Remove comments\n            migration.down = down.replace(/^\\-\\-.*?$/gm, '').trim(); // and trim whitespaces\n            /* eslint-enable no-param-reassign */\n            resolve();\n          }\n        }\n      });\n    })));\n\n    // Create a database table for migrations meta data if it doesn't exist\n    await this.run(`CREATE TABLE IF NOT EXISTS \"${table}\" (\n  id   INTEGER PRIMARY KEY,\n  name TEXT    NOT NULL,\n  up   TEXT    NOT NULL,\n  down TEXT    NOT NULL\n)`);\n\n    // Get the list of already applied migrations\n    let dbMigrations = await this.all(\n      `SELECT id, name, up, down FROM \"${table}\" ORDER BY id DESC`\n    );\n\n    // Undo migrations that exist only in the database but not in files,\n    // also undo the last migration if the `force` option was set to `last`.\n    const lastMigration = migrations[migrations.length - 1];\n    for (const migration of dbMigrations.slice().sort((a, b) => a.id < b.id)) {\n      if (!migrations.some(x => x.id === migration.id) ||\n        (force === 'last' && migration.id === lastMigration.id)) {\n        await this.run('BEGIN');\n        try {\n          await this.exec(migration.down);\n          await this.run(`DELETE FROM \"${table}\" WHERE id = ?`, migration.id);\n          await this.run('COMMIT');\n          dbMigrations = dbMigrations.filter(x => x.id !== migration.id);\n        } catch (err) {\n          await this.run('ROLLBACK');\n          throw err;\n        }\n      } else {\n        break;\n      }\n    }\n\n    // Apply pending migrations\n    const lastMigrationId = dbMigrations.length ? dbMigrations[dbMigrations.length - 1].id : 0;\n    for (const migration of migrations) {\n      if (migration.id > lastMigrationId) {\n        await this.run('BEGIN');\n        try {\n          await this.exec(migration.up);\n          await this.run(\n            `INSERT INTO \"${table}\" (id, name, up, down) VALUES (?, ?, ?, ?)`,\n            migration.id, migration.name, migration.up, migration.down\n          );\n          await this.run('COMMIT');\n        } catch (err) {\n          await this.run('ROLLBACK');\n          throw err;\n        }\n      }\n    }\n\n    return this;\n  }\n}\n\nexport default Database;\n","/**\n * SQLite client library for Node.js applications\n *\n * Copyright © 2016 Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport sqlite3 from 'sqlite3';\nimport Database from './Database';\n\nconst db = new Database(null, { Promise: global.Promise });\n\n/**\n * Opens SQLite database.\n *\n * @returns Promise<Database> A promise that resolves to an instance of SQLite database client.\n */\ndb.open = (filename, { mode = null, verbose = false, Promise = global.Promise } = {}) => {\n  let driver;\n\n  if (verbose) {\n    sqlite3.verbose();\n  }\n\n  return new Promise((resolve, reject) => {\n    if (mode !== null) {\n      driver = new sqlite3.Database(filename, mode, err => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    } else {\n      driver = new sqlite3.Database(filename, err => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    }\n  }).then(() => {\n    db.driver = driver;\n    db.Promise = Promise;\n    return new Database(driver, { Promise });\n  });\n};\n\nexport default db;\n"],"names":[],"mappings":"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"}